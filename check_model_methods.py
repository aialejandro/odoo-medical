#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para probar la validaci√≥n de m√©todos como lo har√≠a Odoo
"""

import re

def check_model_methods():
    """Verifica que los m√©todos est√©n correctamente definidos en el modelo"""
    
    model_file = '/opt/odoo18/odoo-custom-addons/odoo_medical/models/medical_consultation.py'
    
    with open(model_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Buscar la clase MedicalConsultation
    class_pattern = r'class\s+MedicalConsultation\s*\([^)]+\):'
    class_match = re.search(class_pattern, content)
    
    if not class_match:
        print("‚ùå No se encontr√≥ la clase MedicalConsultation")
        return False
    
    class_start = class_match.end()
    
    # Buscar la siguiente clase para determinar el final de MedicalConsultation
    next_class_pattern = r'\nclass\s+\w+'
    next_class_match = re.search(next_class_pattern, content[class_start:])
    
    if next_class_match:
        class_end = class_start + next_class_match.start()
    else:
        class_end = len(content)
    
    class_content = content[class_start:class_end]
    
    # Buscar m√©todos espec√≠ficos
    methods = [
        'action_print_private_certificate',
        'action_print_iess_certificate'
    ]
    
    found_methods = []
    for method in methods:
        method_pattern = rf'def\s+{method}\s*\([^)]*\):'
        if re.search(method_pattern, class_content):
            found_methods.append(method)
            print(f"‚úÖ M√©todo encontrado: {method}")
        else:
            print(f"‚ùå M√©todo NO encontrado: {method}")
    
    # Verificar indentaci√≥n (todos los m√©todos deber√≠an tener la misma indentaci√≥n base)
    method_lines = []
    for line_num, line in enumerate(class_content.split('\n'), 1):
        if line.strip().startswith('def '):
            indent = len(line) - len(line.lstrip())
            method_lines.append((line_num, line.strip(), indent))
    
    if method_lines:
        base_indent = method_lines[0][2]
        print(f"\nüìê Verificando indentaci√≥n (base: {base_indent} espacios):")
        for line_num, method_def, indent in method_lines:
            if 'action_print_' in method_def:
                if indent == base_indent:
                    print(f"   ‚úÖ {method_def[:30]}... - Indentaci√≥n correcta")
                else:
                    print(f"   ‚ùå {method_def[:30]}... - Indentaci√≥n incorrecta ({indent} vs {base_indent})")
    
    print(f"\nüìä Resumen:")
    print(f"   ‚Ä¢ M√©todos requeridos: {len(methods)}")
    print(f"   ‚Ä¢ M√©todos encontrados: {len(found_methods)}")
    print(f"   ‚Ä¢ Estado: {'‚úÖ OK' if len(found_methods) == len(methods) else '‚ùå INCOMPLETO'}")
    
    return len(found_methods) == len(methods)

if __name__ == '__main__':
    success = check_model_methods()
    if success:
        print("\nüéâ ¬°Todos los m√©todos est√°n correctamente definidos!")
    else:
        print("\n‚ö†Ô∏è  Hay problemas con la definici√≥n de m√©todos.")
